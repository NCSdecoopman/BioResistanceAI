models:

  LogisticRegression_L1:
    class_path: sklearn.linear_model.LogisticRegression
    params:
      penalty: ["l1"]
      solver: ["liblinear"]
      max_iter: [1000]
      C: [0.01, 0.1, 1, 10, 100, 1000]
      class_weight: ["balanced", null]

  LogisticRegression_L2:
    class_path: sklearn.linear_model.LogisticRegression
    params:
      penalty: ["l2"]
      solver: ["liblinear"]
      max_iter: [1000]
      C: [0.01, 0.1, 1, 10, 100, 1000]
      class_weight: ["balanced", null]

  SVC:
    class_path: sklearn.svm.SVC
    params:
      kernel: ["linear", "rbf"]
      C: [0.1, 1, 10, 100]
      gamma: ["scale", "auto"]
      class_weight: ["balanced", null]

  RandomForestClassifier:
    class_path: sklearn.ensemble.RandomForestClassifier
    params:
      n_estimators: [100, 200, 500]
      max_depth: [5, 10, 20, null]
      class_weight: ["balanced", null]

  XGBClassifier:
    class_path: xgboost.XGBClassifier
    params:
      n_estimators: [100, 200]
      max_depth: [5, 10, 20]
      learning_rate: [0.01, 0.1, 0.2]
      tree_method: ["hist"]
      device: ["cuda:0"]
      eval_metric: ["logloss"]

  SkorchMLPClassifier:
    class_path: skorch.NeuralNetClassifier
    params:
      module: [your_module.MLP]
      max_epochs: [20, 50]
      lr: [0.01, 0.001]
      device: ["cuda"]
      optimizer: [torch.optim.Adam]

  LGBMClassifier:
    class_path: lightgbm.LGBMClassifier
    params:
      boosting_type: ["gbdt"]
      n_estimators: [100, 200]
      max_depth: [5, 10, -1]
      num_leaves: [31, 64]
      learning_rate: [0.01, 0.1]
      class_weight: ["balanced", null]
      device: ["gpu"]         
      gpu_platform_id: [0]    # facultatif, mais explicite si plusieurs GPUs
      gpu_device_id: [0]
