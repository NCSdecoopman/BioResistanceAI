models:

  LogisticRegression_L1:
    class_path: sklearn.linear_model.LogisticRegression
    params:
      penalty: ["l1"]
      solver: ["liblinear"]
      max_iter: [1000]
      C: [0.01, 0.1, 1, 10, 100, 1000]
      class_weight: ["balanced", null]

  LogisticRegression_L2:
    class_path: sklearn.linear_model.LogisticRegression
    params:
      penalty: ["l2"]
      solver: ["liblinear"]
      max_iter: [1000]
      C: [0.01, 0.1, 1, 10, 100, 1000]
      class_weight: ["balanced", null]

  SVC:
    class_path: sklearn.svm.SVC
    params:
      kernel: ["linear", "rbf"]
      C: [0.1, 1, 10, 100]
      gamma: ["scale", "auto"]
      class_weight: ["balanced", null]

  RandomForestClassifier:
    class_path: sklearn.ensemble.RandomForestClassifier
    params:
      n_estimators: [100, 200, 500]
      max_depth: [5, 10, 20, null]
      class_weight: ["balanced", null]

  XGBClassifier:
    class_path: xgboost.XGBClassifier
    params:
      n_estimators: [100, 200]
      max_depth: [5, 10, 20]
      learning_rate: [0.01, 0.1, 0.2]
      tree_method: ["gpu_hist"]
      predictor: ["gpu_predictor"]
      use_label_encoder: [false]
      eval_metric: ["logloss"]

  MLPClassifier:
    class_path: sklearn.neural_network.MLPClassifier
    params:
      hidden_layer_sizes: [[100], [200], [200, 100]]
      activation: ["relu", "tanh"]
      alpha: [0.0001, 0.001]
      max_iter: [500, 1000]
      solver: ["adam"]
      early_stopping: [true]
